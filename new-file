$ rails new MySite
create
create  README.rdoc
create  Rakefile
create  config.ru
create  .gitignore
create  Gemfile
create  app
create  app/assets/javascripts/application.js
create  app/assets/stylesheets/application.css
create  app/controllers/application_controller.rb
create  app/helpers/application_helper.rb
create  app/views/layouts/application.html.erb
create  app/assets/images/.keep
create  app/mailers/.keep
create  app/models/.keep
create  app/controllers/concerns/.keep
create  app/models/concerns/.keep
create  bin
create  bin/bundle
create  bin/rails
create  bin/rake
create  config
create  config/routes.rb
create  config/application.rb
create  config/environment.rb
create  config/secrets.yml
create  config/environments
create  config/environments/development.rb
create  config/environments/production.rb
create  config/environments/test.rb
create  config/initializers
create  config/initializers/backtrace_silencers.rb
create  config/initializers/cookies_serializer.rb
create  config/initializers/filter_parameter_logging.rb
create  config/initializers/inflections.rb
create  config/initializers/mime_types.rb
create  config/initializers/session_store.rb
create  config/initializers/wrap_parameters.rb
create  config/locales
create  config/locales/en.yml
create  config/boot.rb
create  config/database.yml
create  db
create  db/seeds.rb
create  lib
create  lib/tasks
create  lib/tasks/.keep
create  lib/assets
create  lib/assets/.keep
create  log
create  log/.keep
create  public
create  public/404.html
create  public/422.html
create  public/500.html
create  public/favicon.ico
create  public/robots.txt
create  test/fixtures
create  test/fixtures/.keep
create  test/controllers
create  test/controllers/.keep
create  test/mailers
create  test/mailers/.keep
create  test/models
create  test/models/.keep
create  test/helpers
create  test/helpers/.keep
create  test/integration
create  test/integration/.keep
create  test/test_helper.rb
create  tmp/cache
create  tmp/cache/assets
create  vendor/assets/javascripts
create  vendor/assets/javascripts/.keep
create  vendor/assets/stylesheets
create  vendor/assets/stylesheets/.keep
$ bundle install
Fetching gem metadata from https://rubygems.org/..........
Resolving dependencies...
Using rake 10.4.2
Using i18n 0.7.0
Using json 1.8.2
Using minitest 5.5.1
Using thread_safe 0.3.5
Using tzinfo 1.2.2
Using activesupport 4.1.1
Using builder 3.2.2
Using erubis 2.7.0
Using actionview 4.1.1
Using rack 1.5.2
Using rack-test 0.6.3
Using actionpack 4.1.1
Using mime-types 1.25.1
Using polyglot 0.3.5
Using treetop 1.4.15
Using mail 2.5.4
Using actionmailer 4.1.1
Using activemodel 4.1.1
Using arel 5.0.1.20140414130214
Using activerecord 4.1.1
Using bundler 1.6.1
Using coffee-script-source 1.9.1
Using execjs 2.4.0
Using coffee-script 2.3.0
Using thor 0.19.1
Using railties 4.1.1
Using coffee-rails 4.0.1
Using hike 1.2.3
Using multi_json 1.11.0
Using jbuilder 2.2.11
Using jquery-rails 3.1.2
Using tilt 1.4.1
Using sprockets 2.12.3
Using sprockets-rails 2.2.4
Using rails 4.1.1
Using rdoc 4.2.0
Using sass 3.2.19
Using sass-rails 4.0.5
Using sdoc 0.4.1
Using spring 1.3.3
Using sqlite3 1.3.10
Using turbolinks 2.5.3
Using uglifier 2.7.1
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.
         run  bundle exec spring binstub --all
Warning: You're using Rubygems 2.0.14 with Spring. Upgrade to at least Rubygems 2.1.0 and run `gem pristine --all` for better startup performance.
* bin/rake: spring inserted
* bin/rails: spring inserted
$ rails server
=> Booting WEBrick
=> Rails 4.1.1 application starting in development on http://localhost:8000
=> Run `rails server -h` for more startup options
=> Ctrl-C to shutdown server
[2015-03-17 18:46:05] INFO  WEBrick 1.3.1
[2015-03-17 18:46:05] INFO  ruby 2.0.0 (2013-11-22) [x86_64-darwin13.1.0]
[2015-03-17 18:46:05] INFO  WEBrick::HTTPServer#start: pid=82666 port=8000
$ 

#rails new command created a new Rails app named MySite. It generated a number of files and folders that we will use to build the app. In the Code Editor, click on the folder icon  to see these files and folders. We'll see what these files and folders are for in the next exercises. 

#The rails new command is the starting point of every Rails project.

#The bundle install command installed all the software packages needed by the new Rails app. These software packages are called gems and they are listed in the file Gemfile.

#The rails server command started the Rails development server so that we could preview the app in the browser by visiting http://localhost:8000. This development server is called WEBrick.


#What happens when you visit http://localhost:8000 in the browser? Check out the diagram in the browser.

The browser makes a request for the URL http://localhost:8000.
The request hits the Rails router in config/routes.rb. The router recognizes the URL and sends the request to the controller.
The controller receives the request and processes it.
The controller passes the request to the view.
The view renders the page as HTML.
The controller sends the HTML back to the browser for you to see.
This is called the request/response cycle. It's a useful way to see how a Rails app's files and folders fit together.


#
Looking at the request/response cycle, we need three parts to build a Rails app: a controller, a route, and a view. Let's start here by creating a controller.

In the terminal, type:

rails generate controller Pages

2.
After rails generate finishes running, in the Code Editor, open app/controllers/pages_controller.rb. Within the class PagesController, add a method home:

class PagesController < ApplicationController 

  def home
  end

end



<div class="main">
  <div class="container">
    <h1>Hello my name is Molly.</h1>
    <p>I make Rails apps.</p>
  </div>
</div>


#Using the request/response cycle as a guide, this has been our workflow when making a Rails app.

Generate a new Rails app.
Generate a controller and add an action.
Create a route that maps a URL to the controller action.
Create a view with HTML and CSS.
Run the local web server and preview the app in the browser.


#roadway wants to build a Rails app for their home page. Here's what it looks like.

Looking at the request/response cycle, we need three parts to build this Rails app - a route, a controller, and a view.

To preview your app at any point:

In the terminal, type rails s -p 8080
In the browser, visit http://localhost:8080




